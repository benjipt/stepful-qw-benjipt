/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as IndexRouteImport } from './routes/index';
import { Route as UsersUserIdAssignmentsAssignmentIdIndexRouteImport } from './routes/users/$userId/assignments/$assignmentId/index';
import { Route as UsersUserIdAssignmentsAssignmentIdSessionIndexRouteImport } from './routes/users/$userId/assignments/$assignmentId/session/index';
import { Route as UsersUserIdAssignmentsAssignmentIdSummaryIndexRouteImport } from './routes/users/$userId/assignments/$assignmentId/summary/index';
import { Route as UsersUserIdAssignmentsIndexRouteImport } from './routes/users/$userId/assignments/index';
import { Route as UsersUserIdIndexRouteImport } from './routes/users/$userId/index';
import { Route as UsersIndexRouteImport } from './routes/users/index';

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any);
const UsersUserIdIndexRoute = UsersUserIdIndexRouteImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRouteImport,
} as any);
const UsersUserIdAssignmentsIndexRoute =
  UsersUserIdAssignmentsIndexRouteImport.update({
    id: '/users/$userId/assignments/',
    path: '/users/$userId/assignments/',
    getParentRoute: () => rootRouteImport,
  } as any);
const UsersUserIdAssignmentsAssignmentIdIndexRoute =
  UsersUserIdAssignmentsAssignmentIdIndexRouteImport.update({
    id: '/users/$userId/assignments/$assignmentId/',
    path: '/users/$userId/assignments/$assignmentId/',
    getParentRoute: () => rootRouteImport,
  } as any);
const UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute =
  UsersUserIdAssignmentsAssignmentIdSummaryIndexRouteImport.update({
    id: '/users/$userId/assignments/$assignmentId/summary/',
    path: '/users/$userId/assignments/$assignmentId/summary/',
    getParentRoute: () => rootRouteImport,
  } as any);
const UsersUserIdAssignmentsAssignmentIdSessionIndexRoute =
  UsersUserIdAssignmentsAssignmentIdSessionIndexRouteImport.update({
    id: '/users/$userId/assignments/$assignmentId/session/',
    path: '/users/$userId/assignments/$assignmentId/session/',
    getParentRoute: () => rootRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/users': typeof UsersIndexRoute;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/assignments': typeof UsersUserIdAssignmentsIndexRoute;
  '/users/$userId/assignments/$assignmentId': typeof UsersUserIdAssignmentsAssignmentIdIndexRoute;
  '/users/$userId/assignments/$assignmentId/session': typeof UsersUserIdAssignmentsAssignmentIdSessionIndexRoute;
  '/users/$userId/assignments/$assignmentId/summary': typeof UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/users': typeof UsersIndexRoute;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/assignments': typeof UsersUserIdAssignmentsIndexRoute;
  '/users/$userId/assignments/$assignmentId': typeof UsersUserIdAssignmentsAssignmentIdIndexRoute;
  '/users/$userId/assignments/$assignmentId/session': typeof UsersUserIdAssignmentsAssignmentIdSessionIndexRoute;
  '/users/$userId/assignments/$assignmentId/summary': typeof UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/users/': typeof UsersIndexRoute;
  '/users/$userId/': typeof UsersUserIdIndexRoute;
  '/users/$userId/assignments/': typeof UsersUserIdAssignmentsIndexRoute;
  '/users/$userId/assignments/$assignmentId/': typeof UsersUserIdAssignmentsAssignmentIdIndexRoute;
  '/users/$userId/assignments/$assignmentId/session/': typeof UsersUserIdAssignmentsAssignmentIdSessionIndexRoute;
  '/users/$userId/assignments/$assignmentId/summary/': typeof UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/users'
    | '/users/$userId'
    | '/users/$userId/assignments'
    | '/users/$userId/assignments/$assignmentId'
    | '/users/$userId/assignments/$assignmentId/session'
    | '/users/$userId/assignments/$assignmentId/summary';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/users'
    | '/users/$userId'
    | '/users/$userId/assignments'
    | '/users/$userId/assignments/$assignmentId'
    | '/users/$userId/assignments/$assignmentId/session'
    | '/users/$userId/assignments/$assignmentId/summary';
  id:
    | '__root__'
    | '/'
    | '/users/'
    | '/users/$userId/'
    | '/users/$userId/assignments/'
    | '/users/$userId/assignments/$assignmentId/'
    | '/users/$userId/assignments/$assignmentId/session/'
    | '/users/$userId/assignments/$assignmentId/summary/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  UsersIndexRoute: typeof UsersIndexRoute;
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute;
  UsersUserIdAssignmentsIndexRoute: typeof UsersUserIdAssignmentsIndexRoute;
  UsersUserIdAssignmentsAssignmentIdIndexRoute: typeof UsersUserIdAssignmentsAssignmentIdIndexRoute;
  UsersUserIdAssignmentsAssignmentIdSessionIndexRoute: typeof UsersUserIdAssignmentsAssignmentIdSessionIndexRoute;
  UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute: typeof UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/': {
      id: '/users/';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof UsersIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/$userId/': {
      id: '/users/$userId/';
      path: '/users/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof UsersUserIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/$userId/assignments/': {
      id: '/users/$userId/assignments/';
      path: '/users/$userId/assignments';
      fullPath: '/users/$userId/assignments';
      preLoaderRoute: typeof UsersUserIdAssignmentsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/$userId/assignments/$assignmentId/': {
      id: '/users/$userId/assignments/$assignmentId/';
      path: '/users/$userId/assignments/$assignmentId';
      fullPath: '/users/$userId/assignments/$assignmentId';
      preLoaderRoute: typeof UsersUserIdAssignmentsAssignmentIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/$userId/assignments/$assignmentId/summary/': {
      id: '/users/$userId/assignments/$assignmentId/summary/';
      path: '/users/$userId/assignments/$assignmentId/summary';
      fullPath: '/users/$userId/assignments/$assignmentId/summary';
      preLoaderRoute: typeof UsersUserIdAssignmentsAssignmentIdSummaryIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/$userId/assignments/$assignmentId/session/': {
      id: '/users/$userId/assignments/$assignmentId/session/';
      path: '/users/$userId/assignments/$assignmentId/session';
      fullPath: '/users/$userId/assignments/$assignmentId/session';
      preLoaderRoute: typeof UsersUserIdAssignmentsAssignmentIdSessionIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
  UsersUserIdAssignmentsIndexRoute: UsersUserIdAssignmentsIndexRoute,
  UsersUserIdAssignmentsAssignmentIdIndexRoute:
    UsersUserIdAssignmentsAssignmentIdIndexRoute,
  UsersUserIdAssignmentsAssignmentIdSessionIndexRoute:
    UsersUserIdAssignmentsAssignmentIdSessionIndexRoute,
  UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute:
    UsersUserIdAssignmentsAssignmentIdSummaryIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
