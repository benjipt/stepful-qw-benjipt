/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/user_assignments/{userAssignmentId}/questions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns all assignment questions for a given user assignment, including user responses if present */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User Assignment ID */
          userAssignmentId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description questions found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              questionId: number;
              content: string;
              choices: string[] | null;
              response: string | null;
              points: number;
            }[];
          };
        };
        /** @description user assignment not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user_assignments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** list user_assignments */
    get: {
      parameters: {
        query: {
          /** @description User ID */
          userId: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              assignmentId: number;
              title: string;
              status: string;
              score?: number | null;
              /** @description Total time spent in seconds */
              totalTimeSpent?: number | null;
              results?: {
                totalQuestions: number;
                totalCorrect: number;
                questions: {
                  id: number;
                  content: string;
                  response: string;
                  correct: boolean;
                  points: number;
                }[];
              } | null;
            }[];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user_assignments/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** show user_assignment */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description UserAssignment ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              assignmentId: number;
              title: string;
              status: string;
              score?: number | null;
              /** @description Total time spent in seconds */
              totalTimeSpent?: number | null;
              results?: {
                totalQuestions: number;
                totalCorrect: number;
                questions: {
                  id: number;
                  content: string;
                  response: string;
                  correct: boolean;
                  points: number;
                }[];
              } | null;
            };
          };
        };
        /** @description not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** list users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id: number;
              name: string;
              email: string;
            }[];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
